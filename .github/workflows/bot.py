import discord
import asyncio
import random
from discord.ext import tasks, commands
from datetime import datetime, timedelta

TOKEN = '–∑–¥–µ—Å—å –±—ã–ª —Ç–æ–∫–µ–Ω'
bot = commands.Bot(command_prefix='/')

def is_bot(msg):
    return msg.author == bot.user

#–∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π –≤ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞
@tasks.loop(hours=24)
async def my_loop():
        with open('days.txt', 'r') as dayf:
            read = dayf.readlines()[-1]
            
        last = datetime.strptime(str(read[0:16]), "%d.%m.%Y %H:%M")
        current = datetime.today().strftime("%d.%m.%Y %H:%M")
        tot = datetime.strptime(current, "%d.%m.%Y %H:%M") - last
        emoch = ''
        for ch in str(tot.days):
            emoch += f"{ch}Ô∏è‚É£"          
        if tot.days % 10 == 1 and tot.days % 100 != 11:
            dnyaei = "–¥–µ–Ω—å"
        elif 2 <= tot.days % 10 <= 4 and (n % 100 < 10 or tot.days % 100 >= 20):
            dnyaei = "–¥–Ω—è"
        else:
            dnyaei = "–¥–Ω–µ–π"
        
        await bot.change_presence(activity=discord.Streaming(name=f"{emoch} {dnyaei}",url="https://www.twitch.tv/silvername"))
        print(f'{current} date refreshed\n------')

#–ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç, —Å –∫–∞–∫–∏–º id –∏ –∏–º–µ–Ω–µ–º –æ–Ω –∑–∞—à–µ–ª
@bot.event
async def on_ready():
    print(f'Logged in as "{bot.user.name}"\nid: {bot.user.id}\n------')
    my_loop.start()

#–ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª, –±–æ—Ç –∑–∞—Ö–æ–¥–∏—Ç —Ç—É–¥–∞ –∂–µ –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ü–∏—é welcome.mp3
@bot.event    
async def on_voice_state_update(member, before, after):
    if member.bot:
        return
    
    if not before.channel and after.channel and (after.channel.id==758215230470750242 or after.channel.id==601325824855244810):
        current = datetime.today().strftime("%d.%m.%Y %H:%M")
        print(f'{current} {member.name} joined {after.channel.name}\n------')
        voice = await after.channel.connect()
        await asyncio.sleep(1)
        voice.play(discord.FFmpegPCMAudio('welcome.mp3'))
        await asyncio.sleep(3)
        await voice.disconnect()

#–±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è/ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∫—Ü–∏–∏ –∫ –Ω–∏–º
@bot.event    
async def on_message(msg):
    if ("69" in msg.content):
            await msg.add_reaction('üá≥')
            await msg.add_reaction('üáÆ')  
            await msg.add_reaction('üá®')
            await msg.add_reaction('üá™')

    if msg.author == bot.user:  #—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∑–∞–º—ã–∫–∞–Ω–∏—è –≤ —Å–µ–±—è  
        return
    else:
        if ("—Ç–æ–∫—Å–∏–∫" in msg.content or "toxic" in msg.content):  #—Ç–æ, —Ä–∞–¥–∏ —á–µ–≥–æ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –±–æ—Ç. –ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ, —Ç–æ —Å—á–µ—Ç—á–∏–∫ –æ–±–Ω—É–ª–∏—Ç—Å—è, —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∑–∞–ø–∏—à–µ—Ç—Å—è –≤ —Ñ–∞–π–ª –∏ –µ—Å–ª–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω —Ä–µ–∫–æ—Ä–¥, –∑–∞–ø–∏—à–µ—Ç—Å—è —Ä–µ–∫–æ—Ä–¥     
            rrrr = 0
            with open('days.txt', 'r') as dayf:
                read_date = dayf.readlines()[-1]

            last_date = datetime.strptime(str(read_date[0:16]), "%d.%m.%Y %H:%M")
            current_date = datetime.today().strftime("%d.%m.%Y %H:%M")
            total = datetime.strptime(current_date, "%d.%m.%Y %H:%M") - last_date
            stotal = str(total)[:-3]
            with open('days.txt', 'a') as dayf:
                dayf.write('\n' + current_date)
                      
            await msg.channel.send(f'{stotal} –±–µ–∑ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏')

            with open('record.txt', 'r') as recordf:
                rr = recordf.readline()
            
            await msg.channel.send(f'{rr} - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∫–æ—Ä–¥')

            if rr[0:5]=='1 day':
                rrr = datetime.strptime(rr, "%d day, %H:%M")
            elif rr[2]!='d' and rr[3]!='d':
                    rrr = datetime.strptime(rr, "%H:%M")
                    rrrr=1
            else:
                rrr = datetime.strptime(rr, "%d days, %H:%M")
                               
            if rrrr == 1:
                if total > timedelta(hours=rrr.hour, minutes=rrr.minute):
                    with open('record.txt', 'w') as recordf:
                        recordf.write(stotal)
                        await msg.channel.send('–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!')
            elif total > timedelta(days = rrr.day, hours=rrr.hour, minutes=rrr.minute):
                    with open('record.txt', 'w') as recordf:
                        recordf.write(stotal)
                        await msg.channel.send('–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!')
            my_loop.restart()
                

        if ("nice" in msg.content or "–Ω–∞–π—Å" in msg.content): #—Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
            await msg.add_reaction('6Ô∏è‚É£')
            await msg.add_reaction('9Ô∏è‚É£')  


        if ("kek" in msg.content or "–∫–µ–∫" in msg.content or "<:KEKW:719911656146075688>" in msg.content): #—Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
            await msg.add_reaction("<:KEKW:719911656146075688>")

    await bot.process_commands(msg)
    
    
@bot.command() #–∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥
async def test(ctx, arg):
    await ctx.channel.send(arg)

@bot.command() #–∫–æ–º–∞–Ω–¥–∞ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–º—ã–º —Ä–∞–Ω–¥–æ–º–æ–º
async def roll(ctx, *arg):
    if not arg:
            response = str(random.randint(1, 100))
    elif len(arg) == 1:
        try:
            rollx = int(arg[0])
            response = str(random.randint(1, rollx))
        except ValueError:
            response = f"{ctx.author.display_name}, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥"
    elif len(arg) == 2:
        try:
            rollx = int(arg[0])
            rolly = int(arg[1])
            response = str(random.randint(rollx, rolly))
        except ValueError:
            response = f"{ctx.author.display_name}, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥"
    else: 
        response = f"{ctx.author.display_name}, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥"
   
    await ctx.channel.send(response)

@bot.command() #–∫–æ–º–∞–Ω–¥–∞ –º–æ–Ω–µ—Ç–∫–∏
async def flip(ctx):
    response = random.choices(["–æ—Ä—ë–ª", "—Ä–µ—à–∫–∞", "—Ä–µ–±—Ä–æ"], weights=[40, 40, 1])
    await ctx.channel.send(*response)
  

@bot.command() #–∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def clear(ctx):
    try:
        deleted = await ctx.channel.purge(limit=10, check=is_bot)
        await ctx.channel.send(f'Deleted {len(deleted)} message(s)')
        await asyncio.sleep(3)
        await ctx.channel.purge(limit=1, check=is_bot)
    except:
        await ctx.channel.send('–ù–µ—Ç –ø—Ä–∞–≤!')
       
bot.run(TOKEN) #–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
